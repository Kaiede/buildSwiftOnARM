From fcbe997e72af4b306c5bda3108672988a11cef6a Mon Sep 17 00:00:00 2001
From: Slava Pestov <spestov@apple.com>
Date: Thu, 30 Aug 2018 20:06:17 -0700
Subject: [PATCH 1/2] IRGen/Runtime: Use method descriptors instead of dispatch
 thunks as keys in resilient witness tables

---
 include/swift/ABI/Metadata.h       | 11 +++++------
 lib/IRGen/GenDecl.cpp              | 22 ----------------------
 lib/IRGen/GenProto.cpp             | 12 ++++++------
 lib/IRGen/IRGenModule.h            |  4 ----
 stdlib/public/runtime/Metadata.cpp |  3 +--
 test/IRGen/protocol_resilience.sil |  4 ++--
 6 files changed, 14 insertions(+), 42 deletions(-)

diff --git a/include/swift/ABI/Metadata.h b/include/swift/ABI/Metadata.h
index 06d6639e6bb..c8e1a3209f5 100644
--- a/include/swift/ABI/Metadata.h
+++ b/include/swift/ABI/Metadata.h
@@ -1635,9 +1635,8 @@ struct TargetProtocolRequirement {
   /// is also to uniquely identify the requirement in resilient witness
   /// tables, which is why it appears here.
   ///
-  /// This forms the basis of our mechanism to hide witness table offsets
-  /// from clients, both when calling protocol requirements and when
-  /// defining witness tables.
+  /// This allows clients to call protocol requirements without depending
+  /// on the witness table offset of the requirement.
   ///
   /// Will be null if the protocol is not resilient.
   RelativeDirectPointer<void, /*nullable*/ true> Function;
@@ -1923,11 +1922,11 @@ using GenericBoxHeapMetadata = TargetGenericBoxHeapMetadata<InProcess>;
 ///
 /// This is accomplished by emitting an order-independent series of
 /// relative pointer pairs, consisting of a protocol requirement together
-/// with a witness. The requirement is identified by an indirect relative
-/// pointer to the protocol dispatch thunk.
+/// with a witness. The requirement is identified by an indirectable relative
+/// pointer to the protocol requirement descriptor.
 template <typename Runtime>
 struct TargetResilientWitness {
-  RelativeIndirectPointer<void> Function;
+  RelativeIndirectablePointer<TargetProtocolRequirement<Runtime>> Requirement;
   RelativeDirectPointer<void> Witness;
 };
 using ResilientWitness = TargetResilientWitness<InProcess>;
diff --git a/lib/IRGen/GenDecl.cpp b/lib/IRGen/GenDecl.cpp
index 52aa0d09774..fd48952f1a8 100644
--- a/lib/IRGen/GenDecl.cpp
+++ b/lib/IRGen/GenDecl.cpp
@@ -2583,28 +2583,6 @@ IRGenModule::getAddrOfLLVMVariableOrGOTEquivalent(LinkEntity entity,
   return {gotEquivalent, ConstantReference::Indirect};
 }
 
-/// Get or create a "GOT equivalent" llvm::GlobalVariable, if applicable.
-///
-/// Creates a private, unnamed constant containing the address of another
-/// function. LLVM can replace relative references to this variable with
-/// relative references to the GOT entry for the function in the object file.
-ConstantReference
-IRGenModule::getFunctionGOTEquivalent(LinkEntity entity,
-                                      llvm::Function *func) {
-  auto &gotEntry = GlobalGOTEquivalents[entity];
-  if (gotEntry) {
-    return {gotEntry, ConstantReference::Indirect};
-  }
-
-  // Use it as the initializer for an anonymous constant. LLVM can treat this as
-  // equivalent to the global's GOT entry.
-  llvm::SmallString<64> name;
-  entity.mangle(name);
-  auto gotEquivalent = createGOTEquivalent(*this, func, name);
-  gotEntry = gotEquivalent;
-  return {gotEquivalent, ConstantReference::Indirect};
-}
-
 static TypeEntityReference
 getTypeContextDescriptorEntityReference(IRGenModule &IGM,
                                         NominalTypeDecl *decl) {
diff --git a/lib/IRGen/GenProto.cpp b/lib/IRGen/GenProto.cpp
index 9bb10072685..f7439fafdad 100644
--- a/lib/IRGen/GenProto.cpp
+++ b/lib/IRGen/GenProto.cpp
@@ -1845,12 +1845,12 @@ static llvm::Constant *emitResilientWitnessTable(IRGenModule &IGM,
       continue;
 
     auto declRef = entry.getMethodWitness().Requirement;
-    auto entity = LinkEntity::forDispatchThunk(declRef);
-    auto *func = IGM.getAddrOfDispatchThunk(declRef,
-                                            NotForDefinition);
-    auto requirement = IGM.getFunctionGOTEquivalent(entity, func);
-
-    table.addIndirectRelativeAddress(requirement);
+    auto requirement =
+      IGM.getAddrOfLLVMVariableOrGOTEquivalent(
+        LinkEntity::forMethodDescriptor(declRef),
+        IGM.getPointerAlignment(),
+        IGM.ProtocolRequirementStructTy);
+    table.addRelativeAddress(requirement);
 
     SILFunction *Func = entry.getMethodWitness().Witness;
     llvm::Constant *witness;
diff --git a/lib/IRGen/IRGenModule.h b/lib/IRGen/IRGenModule.h
index ed251be711b..e2d5fd5ea8a 100644
--- a/lib/IRGen/IRGenModule.h
+++ b/lib/IRGen/IRGenModule.h
@@ -1283,10 +1283,6 @@ private:                            \
        llvm::Type *defaultType,
        ConstantReference::Directness forceIndirect = ConstantReference::Direct);
 
-  ConstantReference
-  getFunctionGOTEquivalent(LinkEntity entity,
-                           llvm::Function *func);
-
   llvm::Constant *
   emitRelativeReference(ConstantReference target,
                         llvm::Constant *base,
diff --git a/stdlib/public/runtime/Metadata.cpp b/stdlib/public/runtime/Metadata.cpp
index a87abb060db..d7e53e7b95f 100644
--- a/stdlib/public/runtime/Metadata.cpp
+++ b/stdlib/public/runtime/Metadata.cpp
@@ -3597,12 +3597,11 @@ static void initializeResilientWitnessTable(GenericWitnessTable *genericTable,
       continue;
     }
 
-    void *fn = reqt.Function.get();
     void *impl = reqt.DefaultImplementation.get();
 
     // Find the witness if there is one, otherwise we use the default.
     for (auto &witness : witnesses) {
-      if (witness.Function.get() == fn) {
+      if (witness.Requirement.get() == &reqt) {
         impl = witness.Witness.get();
         break;
       }
diff --git a/test/IRGen/protocol_resilience.sil b/test/IRGen/protocol_resilience.sil
index 4cf31bd071f..03bf70d911b 100644
--- a/test/IRGen/protocol_resilience.sil
+++ b/test/IRGen/protocol_resilience.sil
@@ -158,10 +158,10 @@ protocol InternalProtocol {
 
 // CHECK-SAME: internal constant {
 
-// CHECK-SAME: @"{{got.|__imp_}}$S18resilient_protocol24ProtocolWithRequirementsP5firstyyFTj"
+// CHECK-SAME: @"{{got.|__imp_}}$S18resilient_protocol24ProtocolWithRequirementsP5firstyyFTq"
 // CHECK-SAME: @firstWitness
 
-// CHECK-SAME: @"{{got.|__imp_}}$S18resilient_protocol24ProtocolWithRequirementsP6secondyyFTj"
+// CHECK-SAME: @"{{got.|__imp_}}$S18resilient_protocol24ProtocolWithRequirementsP6secondyyFTq"
 // CHECK-SAME: @secondWitness
 
 // CHECK-SAME: }

From 44c4497ac52f72ba79095e3476cf4b6c172af767 Mon Sep 17 00:00:00 2001
From: Slava Pestov <spestov@apple.com>
Date: Thu, 30 Aug 2018 21:07:18 -0700
Subject: [PATCH 2/2] IRGen/Runtime: Protocol requirement descriptors don't
 need to reference the dispatch thunk

---
 include/swift/ABI/Metadata.h       | 11 -----------
 lib/IRGen/GenMeta.cpp              | 17 ++++++-----------
 lib/IRGen/GenThunk.cpp             |  4 +---
 lib/IRGen/IRGenModule.cpp          |  1 -
 lib/IRGen/IRGenModule.h            |  2 +-
 test/IRGen/protocol_metadata.swift | 22 +++++++++++-----------
 test/IRGen/protocol_resilience.sil | 18 ++++--------------
 7 files changed, 23 insertions(+), 52 deletions(-)

diff --git a/include/swift/ABI/Metadata.h b/include/swift/ABI/Metadata.h
index c8e1a3209f5..503f8c729aa 100644
--- a/include/swift/ABI/Metadata.h
+++ b/include/swift/ABI/Metadata.h
@@ -1630,17 +1630,6 @@ struct TargetProtocolRequirement {
   ProtocolRequirementFlags Flags;
   // TODO: name, type
 
-  /// A function pointer to a global symbol which is used by client code
-  /// to invoke the protocol requirement from a witness table. This pointer
-  /// is also to uniquely identify the requirement in resilient witness
-  /// tables, which is why it appears here.
-  ///
-  /// This allows clients to call protocol requirements without depending
-  /// on the witness table offset of the requirement.
-  ///
-  /// Will be null if the protocol is not resilient.
-  RelativeDirectPointer<void, /*nullable*/ true> Function;
-
   /// The optional default implementation of the protocol.
   RelativeDirectPointer<void, /*nullable*/ true> DefaultImplementation;
 };
diff --git a/lib/IRGen/GenMeta.cpp b/lib/IRGen/GenMeta.cpp
index 36ab8b2007e..5cf2cce84ed 100644
--- a/lib/IRGen/GenMeta.cpp
+++ b/lib/IRGen/GenMeta.cpp
@@ -623,7 +623,6 @@ namespace {
 
     struct RequirementInfo {
       ProtocolRequirementFlags Flags;
-      llvm::Constant *Thunk;
       llvm::Constant *DefaultImpl;
     };
 
@@ -633,26 +632,25 @@ namespace {
       if (entry.isBase()) {
         assert(entry.isOutOfLineBase());
         auto flags = Flags(Flags::Kind::BaseProtocol);
-        return { flags, nullptr, nullptr };
+        return { flags, nullptr };
       }
 
       if (entry.isAssociatedType()) {
         auto flags = Flags(Flags::Kind::AssociatedTypeAccessFunction);
-        return { flags, nullptr, nullptr };
+        return { flags, nullptr };
       }
 
       if (entry.isAssociatedConformance()) {
         auto flags = Flags(Flags::Kind::AssociatedConformanceAccessFunction);
-        return { flags, nullptr, nullptr };
+        return { flags, nullptr };
       }
 
       assert(entry.isFunction());
       SILDeclRef func(entry.getFunction());
 
-      // Look up the dispatch thunk if the protocol is resilient.
-      llvm::Constant *thunk = nullptr;
+      // Emit the dispatch thunk.
       if (Resilient)
-        thunk = IGM.emitDispatchThunk(func);
+        IGM.emitDispatchThunk(func);
 
       // Classify the function.
       auto flags = getMethodDescriptorFlags<Flags>(func.getDecl());
@@ -660,7 +658,7 @@ namespace {
       // Look for a default witness.
       llvm::Constant *defaultImpl = findDefaultWitness(func);
 
-      return { flags, thunk, defaultImpl };
+      return { flags, defaultImpl };
     }
 
     void addRequirements() {
@@ -686,9 +684,6 @@ namespace {
         // Flags.
         reqt.addInt32(info.Flags.getIntValue());
 
-        // Dispatch thunk.
-        reqt.addRelativeAddressOrNull(info.Thunk);
-
         // Default implementation.
         reqt.addRelativeAddressOrNull(info.DefaultImpl);
 
diff --git a/lib/IRGen/GenThunk.cpp b/lib/IRGen/GenThunk.cpp
index 0adf0d71b64..abc681797b4 100644
--- a/lib/IRGen/GenThunk.cpp
+++ b/lib/IRGen/GenThunk.cpp
@@ -95,7 +95,7 @@ static FunctionPointer lookupMethod(IRGenFunction &IGF,
   return emitVirtualMethodValue(IGF, metadata, declRef, funcTy);
 }
 
-llvm::Function *IRGenModule::emitDispatchThunk(SILDeclRef declRef) {
+void IRGenModule::emitDispatchThunk(SILDeclRef declRef) {
   auto *f = getAddrOfDispatchThunk(declRef, ForDefinition);
 
   IRGenFunction IGF(*this, f);
@@ -112,8 +112,6 @@ llvm::Function *IRGenModule::emitDispatchThunk(SILDeclRef declRef) {
     IGF.Builder.CreateRetVoid();
   else
     IGF.Builder.CreateRet(result);
-
-  return f;
 }
 
 llvm::GlobalValue *IRGenModule::defineMethodDescriptor(SILDeclRef declRef,
diff --git a/lib/IRGen/IRGenModule.cpp b/lib/IRGen/IRGenModule.cpp
index 5c3698096b2..cdd47eab6da 100644
--- a/lib/IRGen/IRGenModule.cpp
+++ b/lib/IRGen/IRGenModule.cpp
@@ -235,7 +235,6 @@ IRGenModule::IRGenModule(IRGenerator &irgen,
   ProtocolRequirementStructTy =
       createStructType(*this, "swift.protocol_requirement", {
     Int32Ty,                // flags
-    Int32Ty,                // thunk
     Int32Ty                 // default implementation
   });
   
diff --git a/lib/IRGen/IRGenModule.h b/lib/IRGen/IRGenModule.h
index e2d5fd5ea8a..a051950db49 100644
--- a/lib/IRGen/IRGenModule.h
+++ b/lib/IRGen/IRGenModule.h
@@ -1144,7 +1144,7 @@ private:                            \
   llvm::Function *getAddrOfDispatchThunk(SILDeclRef declRef,
                                          ForDefinition_t forDefinition);
 
-  llvm::Function *emitDispatchThunk(SILDeclRef declRef);
+  void emitDispatchThunk(SILDeclRef declRef);
 
   llvm::GlobalValue *defineAlias(LinkEntity entity,
                                  llvm::Constant *definition);
diff --git a/test/IRGen/protocol_metadata.swift b/test/IRGen/protocol_metadata.swift
index 36e7d03dc08..73cba35a52e 100644
--- a/test/IRGen/protocol_metadata.swift
+++ b/test/IRGen/protocol_metadata.swift
@@ -101,17 +101,17 @@ protocol Comprehensive {
 // CHECK-SAME: i32 11,
 // CHECK-SAME: i32 trunc
 // CHECK-SAME: [6 x i8]* [[COMPREHENSIVE_ASSOC_NAME]]
-// CHECK-SAME:   %swift.protocol_requirement { i32 7, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 8, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 2, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 17, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 1, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 19, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 20, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 22, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 3, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 4, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 6, i32 0, i32 0 }
+// CHECK-SAME:   %swift.protocol_requirement { i32 7, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 8, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 2, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 17, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 1, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 19, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 20, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 22, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 3, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 4, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 6, i32 0 }
 
 
 func reify_metadata<T>(_ x: T) {}
diff --git a/test/IRGen/protocol_resilience.sil b/test/IRGen/protocol_resilience.sil
index 03bf70d911b..8ae643ef719 100644
--- a/test/IRGen/protocol_resilience.sil
+++ b/test/IRGen/protocol_resilience.sil
@@ -55,36 +55,26 @@ import resilient_protocol
 // CHECK-SAME:   @"$S19protocol_resilience17ResilientProtocolMp"
 
 // Protocol requirements
-// CHECK-SAME:   %swift.protocol_requirement { i32 7, i32 0, i32 0 },
-// CHECK-SAME:   %swift.protocol_requirement { i32 8, i32 0, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 7, i32 0 },
+// CHECK-SAME:   %swift.protocol_requirement { i32 8, i32 0 },
 
-// CHECK-SAME:   %swift.protocol_requirement { i32 17,
-// CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.opaque*, %swift.type*, i8**)* @"$S19protocol_resilience17ResilientProtocolP10noDefaultAyyFTj" to [[INT]]),
-// CHECK-SAME:     i32 0
-// CHECK-SAME:   },
+// CHECK-SAME:   %swift.protocol_requirement { i32 17, i32 0 },
 
-// CHECK-SAME:   %swift.protocol_requirement { i32 17,
-// CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.opaque*, %swift.type*, i8**)* @"$S19protocol_resilience17ResilientProtocolP10noDefaultByyFTj" to [[INT]]),
-// CHECK-SAME:     i32 0
-// CHECK-SAME:   },
+// CHECK-SAME:   %swift.protocol_requirement { i32 17, i32 0 },
 
 // CHECK-SAME:   %swift.protocol_requirement { i32 17,
-// CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.opaque*, %swift.type*, i8**)* @"$S19protocol_resilience17ResilientProtocolP8defaultCyyFTj" to [[INT]]),
 // CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.opaque*, %swift.type*, i8**)* @defaultC to [[INT]]),
 // CHECK-SAME:   },
 
 // CHECK-SAME:   %swift.protocol_requirement { i32 17,
-// CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.opaque*, %swift.type*, i8**)* @"$S19protocol_resilience17ResilientProtocolP8defaultDyyFTj" to [[INT]]),
 // CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.opaque*, %swift.type*, i8**)* @defaultD to [[INT]]),
 // CHECK-SAME:   },
 
 // CHECK-SAME:   %swift.protocol_requirement { i32 1,
-// CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.type*, %swift.type*, i8**)* @"$S19protocol_resilience17ResilientProtocolP8defaultEyyFZTj" to [[INT]]),
 // CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.type*, %swift.type*, i8**)* @defaultE to [[INT]]),
 // CHECK-SAME:   },
 
 // CHECK-SAME:   %swift.protocol_requirement { i32 1,
-// CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.type*, %swift.type*, i8**)* @"$S19protocol_resilience17ResilientProtocolP8defaultFyyFZTj" to [[INT]]),
 // CHECK-SAME:     i32{{ | trunc \(i64 }}sub ([[INT]] ptrtoint (void (%swift.type*, %swift.type*, i8**)* @defaultF to [[INT]]),
 // CHECK-SAME:   }
 // CHECK-SAME: }
